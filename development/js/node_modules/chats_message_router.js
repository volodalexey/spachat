var id_Generator = require('./id_generator');

var Chats_message_router = function(wscc) {
    this.wscc = wscc;
};

Chats_message_router.prototype = {

    get_chat_wscs: function(chatId) {
        var chat_wscs = [];
        this.wscc.get_all_wsc().forEach(function(wsc) {
            if (wsc.readyState !== wsc.CLOSED && wsc.has_chat_id(chatId)) {
                chat_wscs.push(wsc);
            }
        });
        return chat_wscs;
    },

    to_chat_wscs_desc: function(chatId) {
        return this.get_chat_wscs(chatId).map(function(wsc) {
            return wsc.ws_device_id;
        });
    },

    broadcast_chat_message: function(chatId, responseData) {
        this.get_chat_wscs().forEach(function(wsc) {
            if (wsc.readyState !== wsc.CLOSED) {
                responseData.target_ws_device_id = wsc.ws_device_id;
                wsc.send(JSON.stringify(responseData));
            }
        });
    },

    onDeviceCreateChat: function(cur_wsc, parsedMessageData) {
        cur_wsc.put_chat_id(parsedMessageData.chat_description.chatId);
        cur_wsc.put_user_id(parsedMessageData.userId);

        var responseData = {
            type: 'chat_created',
            from_user_id: parsedMessageData.userId,
            from_ws_device_id: cur_wsc.ws_device_id,
            chat_description: {
                chatId: id_Generator.generateId()
            }
        };

        cur_wsc.send(JSON.stringify(responseData));

        console.log('Create chat from',
            'ws_device_id = ' + cur_wsc.ws_device_id,
            'user_id = ' + parsedMessageData.userId,
            'to chat_id = ' + parsedMessageData.chat_description.chatId);
    },

    onDeviceChatJoin: function(cur_wsc, parsedMessageData) {
        cur_wsc.put_chat_id(parsedMessageData.chat_description.chatId);
        cur_wsc.put_user_id(parsedMessageData.userId);

        var responseData = {
            type: 'chat_joined',
            from_user_id: parsedMessageData.userId,
            from_ws_device_id: cur_wsc.ws_device_id,
            connectedDevices: this.to_chat_wscs_desc(),
            chat_description: parsedMessageData.chat_description,
            restore_chat_state: parsedMessageData.restore_chat_state
        };

        this.broadcast_chat_message(responseData);

        console.log('Join chat from',
            'ws_device_id = ' + cur_wsc.ws_device_id,
            'user_id = ' + responseData.userId,
            'to chat_id = ' + responseData.chat_description.chatId);
    },

    onDeviceChatOffer: function(cur_wsc, parsedMessageData) {
        cur_wsc.put_chat_id(parsedMessageData.chat_description.chatId);
        cur_wsc.put_user_id(parsedMessageData.userId);

        var target_wsc = this.wscc.get_wsc_by_tmp_dev_id(parsedMessageData.to_ws_device_id);
        if (!target_wsc) {
            cur_wsc.send_error(new Error('Target connection is not found!'), parsedMessageData);
            return;
        }

        var responseData = {
            type: 'notifyChat',
            notify_data: 'handleDevicePassive',
            from_ws_device_id: cur_wsc.ws_device_id,
            userId: parsedMessageData.userId,
            offerDescription: parsedMessageData.offerDescription,
            to_ws_device_id: target_wsc.ws_device_id,
            chat_description: parsedMessageData.chat_description
        };

        target_wsc.send(JSON.stringify(responseData));

        console.log(
            'Offer from',
            'ws_device_id = ' + cur_wsc.ws_device_id,
            'to ws_device_id = ' + target_wsc.ws_device_id,
            'userId = ' + responseData.userId,
            'chatId = ' + responseData.chat_description.chatId);
    },

    onDeviceChatAnswer: function(cur_wsc, parsedMessageData) {
        cur_wsc.put_chat_id(parsedMessageData.chat_description.chatId);
        cur_wsc.put_user_id(parsedMessageData.userId);

        var target_wsc = this.wscc.get_wsc_by_tmp_dev_id(parsedMessageData.to_ws_device_id);
        if (!target_wsc) {
            cur_wsc.send_error(new Error('Target connection is not found!'), parsedMessageData);
            return;
        }

        var responseData = {
            type: 'notifyChat',
            notify_data: 'handleDeviceAnswer',
            from_ws_device_id: cur_wsc.ws_device_id,
            userId: parsedMessageData.userId,
            to_ws_device_id: target_wsc.ws_device_id,
            answerDescription: parsedMessageData.answerDescription,
            chat_description: parsedMessageData.chat_description
        };

        target_wsc.send(JSON.stringify(responseData));

        console.log(
            'Answer from',
            'ws_device_id = ' + cur_wsc.ws_device_id,
            'to ws_device_id = ' + target_wsc.ws_device_id,
            'userId = ' + responseData.userId,
            'chatId = ' + responseData.chat_description.chatId);
    },

    onDeviceChatAccept: function(cur_wsc, parsedMessageData) {
        cur_wsc.put_chat_id(parsedMessageData.chat_description.chatId);
        cur_wsc.put_user_id(parsedMessageData.userId);

        var target_wsc = this.wscc.get_wsc_by_tmp_dev_id(parsedMessageData.to_ws_device_id);
        if (!target_wsc) {
            cur_wsc.send_error(new Error('Target connection is not found!'), parsedMessageData);
            return;
        }

        var responseData = {
            type: 'notifyChat',
            notify_data: 'serverStoredAccept',
            from_ws_device_id: parsedMessageData.ws_device_id,
            from_user_id: parsedMessageData.userId,
            to_ws_device_id: target_wsc.ws_device_id,
            chat_description: parsedMessageData.chat_description
        };

        target_wsc.send(JSON.stringify(responseData));

        console.log(
            'Accept from',
            'ws_device_id = ' + responseData.ws_device_id,
            'to ws_device_id = ' + target_wsc.ws_device_id,
            'userId = ' + responseData.userId,
            'chatId = ' + responseData.chat_description.chatId);
    }
};

module.exports = Chats_message_router;