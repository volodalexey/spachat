var Server_chat_model = function(options) {
    this.chatId = options.chatId;
    this.webSocketsConnections = [];
};

Server_chat_model.prototype = {

    __class_name: "server_chat_model",

    /**
     * tries to store web socket connection
     */
    storeWebSocketConnection: function(currentWebSocketConnection) {
        var _this = this;
        if (_this.webSocketsConnections.indexOf(currentWebSocketConnection) === -1) {
            _this.webSocketsConnections.push(currentWebSocketConnection);
        }
    },

    getAllWebSocketsConnections: function() {
        var _this = this;
        return _this.webSocketsConnections.map(function(_wsConnection) {
            return {
                deviceId: _wsConnection.deviceId,
                tempDeviceId: _wsConnection.tempDeviceId
            };
        });
    },

    destroy: function() {

    },

    /**
     * JSON chat format to send between clients
     */
    toChatDescription: function() {
        return {
            chatId: this.chatId
        }
    },

    /**
     * broadcast for all server stored devices for current chat
     * @param broadcastData
     */
    broadcastMessage: function(broadcastData) {
        var _this = this, unused = [];
        _this.webSocketsConnections.forEach(function(_wsConnection, index) {
            if (_wsConnection.readyState !== _wsConnection.CLOSED) {
                _wsConnection.send(broadcastData);
            } else {
                unused.push(_wsConnection);
            }
        });
        while (unused.length) {
            var toRemoveConnection = unused.shift();
            var removeIndex = _this.webSocketsConnections.indexOf(toRemoveConnection);
            if (removeIndex === -1) {
                console.log('removed old client connection',
                    'deviceId => ', _this.webSocketsConnections[removeIndex].deviceId,
                    'tempDeviceId => ', _this.webSocketsConnections[removeIndex].tempDeviceId);
                _this.webSocketsConnections.splice(removeIndex, 1);
            }
        }
    },

    isConnectedToDevice: function(_wsConnection, _deviceDescription) {
        return (_deviceDescription.deviceId && _wsConnection.deviceId === _deviceDescription.deviceId) ||
            (_deviceDescription.tempDeviceId && _wsConnection.tempDeviceId === _deviceDescription.tempDeviceId);
    },

    getConnection: function(deviceDescription) {
        var connection, _this = this;
        this.webSocketsConnections.every(function(_connection) {
            if (_this.isConnectedToDevice(_connection, deviceDescription)) {
                connection = _connection;
            }
            return !connection;
        });

        return connection;
    },

    getAllConnectionDeviceId: function(connection) {
        return {
            deviceId: connection.deviceId,
            tempDeviceId: connection.tempDeviceId
        }
    }
};

module.exports = Server_chat_model;