var Server_chat_model = function(options) {
    this.chatId = options.chatId;
    this.devicesByDeviceId = {};
    this.offersByDeviceId = {};
    this.webSocketsConnections = [];
};

Server_chat_model.prototype = {

    __class_name: "server_chat_model",

    /**
     * tries to store web socket connection
     */
    storeWebSocketConnection: function(currentWebSocketConnection) {
        var _this = this;
        if (_this.webSocketsConnections.indexOf(currentWebSocketConnection) === -1) {
            _this.webSocketsConnections.push(currentWebSocketConnection);
        }
    },

    getAllWebSocketsConnections: function() {
        return _this.webSocketsConnections.map(function(_wsConnection) {
            return _wsConnection.deviceId || _wsConnection.tempDeviceId;
        });
    },

    /**
     * store or override device by its id
     * @param deviceId
     */
    storeDevice: function(deviceId) {
        var _this = this;
        _this.devicesByDeviceId[deviceId] = deviceId;
    },

    /**
     * store offer from device
     * @param deviceId
     * @param offerDescription
     */
    storeOffer: function(deviceId, offerDescription) {
        var _this = this;
        _this.offersByDeviceId[deviceId] = offerDescription;
    },

    destroy: function() {

    },

    /**
     * JSON chat format to send between clients
     */
    toChatDescription: function() {
        return {
            chatId: this.chatId
        }
    },

    /**
     * broadcast for all server stored devices for current chat
     * @param broadcastData
     */
    broadcastMessage: function(broadcastData) {
        var _this = this, unused = [];
        _this.webSocketsConnections.forEach(function(_wsConnection, index) {
            if (_wsConnection.readyState !== _wsConnection.CLOSED) {
                _wsConnection.send(broadcastData);
            } else {
                unused.push(index);
            }
        });
        while (unused.length) {
            var toRemove = unused.shift();
            console.log('removed old client connection => ', _this.webSocketsConnections[toRemove]);
            _this.webSocketsConnections.splice(toRemove, 1);
        }
    },

    /**
     * send message only to device by its id
     * @param deviceId
     * @param notifyData
     */
    notifyDeviceMessage: function(deviceId, notifyData) {
        var _this = this;
        if (_this.webSocketsByDeviceId[deviceId]) {
            if (_this.webSocketsByDeviceId[deviceId].readyState !== _this.webSocketsByDeviceId[deviceId].CLOSED) {
                _this.webSocketsByDeviceId[deviceId].send(notifyData);
            } else {
                console.log('removed old client connection with device id => ', deviceId);
                delete _this.webSocketsByDeviceId[deviceId];
            }
        } else {
            console.log('requested device id not found => ', deviceId);
        }
    }
};

module.exports = Server_chat_model;