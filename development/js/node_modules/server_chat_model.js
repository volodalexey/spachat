var Server_chat_model = function(options) {
    this.chatId = options.chatId;
    this.devicesByDeviceId = {};
    this.offersByDeviceId = {};
    this.webSocketsByDeviceId = {};
};

Server_chat_model.prototype = {

    __class_name: "server_chat_model",

    /**
     * tries to store web socket connection by device id
     * device id extracted from offer sdp as fingerprint
     */
    storeWebSocketConnection: function(currentWebSocketConnection, deviceId) {
        var _this = this;
        _this.webSocketsByDeviceId[deviceId] = currentWebSocketConnection;
    },

    /**
     * store or override device by its id
     * @param deviceId
     */
    storeDevice: function(deviceId) {
        var _this = this;
        _this.devicesByDeviceId[deviceId] = deviceId;
    },

    /**
     * store offer from device
     * @param deviceId
     * @param offerDescription
     */
    storeOffer: function(deviceId, offerDescription) {
        var _this = this;
        _this.offersByDeviceId[deviceId] = offerDescription;
    },

    destroy: function() {

    },

    /**
     * JSON chat format to send between clients
     */
    toChatDescription: function() {
        return {
            chatId: this.chatId
        }
    },

    /**
     * broadcast for all server stored devices for current chat
     * @param broadcastData
     */
    broadcastMessage: function(broadcastData) {
        var _this = this;
        for (var deviceId in _this.webSocketsByDeviceId) {
            if (_this.webSocketsByDeviceId[deviceId].readyState !== _this.webSocketsByDeviceId[deviceId].CLOSED) {
                _this.webSocketsByDeviceId[deviceId].send(broadcastData);
            } else {
                console.log('removed old client connection with device id => ', _this.webSocketsByDeviceId[deviceId]);
                delete _this.webSocketsByDeviceId[deviceId];
            }
        }
    }
};

module.exports = Server_chat_model;