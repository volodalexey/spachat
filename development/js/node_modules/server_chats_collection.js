var Server_chat_model = require('./server_chat_model');

var Server_chat_collection = function(options) {
    this.chatsById = {};
    this.generateAttempts = 100;
};

Server_chat_collection.prototype = {

    __class_name: "server_chat_collection",
    // TODO use client side module {{
    s4: function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    },

    s4Date: function() {
        return Date.now().toString(16).substring(1);
    },

    generateId: function() {
        return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' +
            this.s4() + '-' + this.s4() + this.s4() + this.s4Date();
    },
    // TODO use client side module }}

    sendError: function(currentWebSocketConnection, error, parsedMessageData) {
        console.log(error);
        var strErr = JSON.stringify({
            message: error.toString(),
            type: "error",
            chat_description: parsedMessageData.chat_description
        });
        currentWebSocketConnection.send(JSON.stringify(strErr));
    },

    checkIfExist: function(newChatData) {
        var _this = this;
        //var oldChatData;
        //_this.every(function(_chatData) {
        //    if (_chatData.chat_description.chatId === newChatData.chat_description.chatId) {
        //        oldChatData = _chatData;
        //    }
        //    return !oldChatData;
        //});
        //return oldChatData;
        return _this.chatsById[newChatData.chat_description.chatId];
    },

    checkOrGenerateChatId: function(options, callback) {
        var _this = this;
        if (_this.checkIfExist(options.messageData)) {
            if (options.currentAttempt < options.generateAttempts) {
                console.log('Try to generate chat new id, old chat id : ', options.messageData.chat_description.chatId);
                options.messageData.chat_description.chatId = _this.generateId();
                console.log('New chat id : ', options.messageData.chat_description.chatId);
                options.currentAttempt++;
                return _this.checkOrGenerateChatId(options, callback);
            }

            return new Error('Unable to generate new chat id!');
        }

        return options.messageData;
    },

    onCreateChat: function(currentWebSocketConnection, parsedMessageData) {
        var _this = this, originalChatId = parsedMessageData.chat_description.chatId;
        var correctedClientChatData = _this.checkOrGenerateChatId({
            messageData: parsedMessageData,
            currentAttempt: 0,
            generateAttempts: _this.generateAttempts
        });

        if (correctedClientChatData && correctedClientChatData instanceof Error) {
            _this.sendError(currentWebSocketConnection, correctedClientChatData, parsedMessageData);
            return;
        }

        var responseData = {
            type: 'created',
            userId: parsedMessageData.userId,
            originalChatId: originalChatId,
            chat_description: correctedClientChatData.chat_description
        };
        _this.storeNewChat(parsedMessageData.chat_description);

        currentWebSocketConnection.send(JSON.stringify(responseData));

        console.log('Create chat from', 'userId = ' + correctedClientChatData.userId, 'chatId = ' + correctedClientChatData.chat_description.chatId);
    },

    storeNewChat: function(chat_description) {
        var _this = this;
        return _this.chatsById[chat_description.chatId] = new Server_chat_model(chat_description);
    },

    onDeviceChatJoin: function(currentWebSocketConnection, parsedMessageData) {
        var _this = this;
        var serverStoredChat = _this.checkIfExist(parsedMessageData);
        if (!serverStoredChat) {
            serverStoredChat = _this.storeNewChat(parsedMessageData.chat_description);
        }

        var responseData = {
            type: 'joined',
            userId: parsedMessageData.userId,
            chat_description: serverStoredChat.toChatDescription()
        };

        currentWebSocketConnection.send(JSON.stringify(responseData));

        console.log('Join chat from', 'userId = ' + responseData.userId, 'chatId = ' + responseData.chat_description.chatId);
    },

    /**
     * device created offer
     * server stores this device and its offer
     * and notifies all other clients in this chat
     * @param currentWebSocketConnection
     * @param parsedMessageData
     */
    onDeviceChatOffer: function(currentWebSocketConnection, parsedMessageData) {
        var _this = this, serverStoredChat = _this.checkIfExist(parsedMessageData);
        if (!serverStoredChat) {
            console.log(new Error('Create offer for chat that is not stored previously on the server'));
            serverStoredChat = _this.storeNewChat(parsedMessageData.chat_description);
        }

        serverStoredChat.storeDevice(parsedMessageData.deviceId);
        serverStoredChat.storeWebSocketConnection(parsedMessageData.deviceId, currentWebSocketConnection);
        serverStoredChat.storeOffer(parsedMessageData.deviceId, parsedMessageData.offerDescription);

        var responseData = {
            type: 'notifyChat',
            notify_data: 'serverStoredOffer',
            deviceId: parsedMessageData.deviceId,
            userId: parsedMessageData.userId,
            chat_description: serverStoredChat.toChatDescription()
        };

        serverStoredChat.broadcastMessage(responseData);

        console.log(
            'Offer from',
            'deviceId = ' + responseData.deviceId,
            'userId = ' + responseData.userId,
            'chatId = ' + responseData.chat_description.chatId);
    },

    /**
     * device created answer for offer
     * notify only the device that created offer
     */
    onAnswer: function(curWS, data) {
        var serverChatData = checkIfExist(data);
        if (!serverChatData) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id not found!')).toString(),
                type: "error",
                chat_description: data.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        }

        if (!serverChatData.chat_description.offer) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id does not have offer!')).toString(),
                type: "error",
                chat_description: serverChatData.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        }

        if (serverChatData.chat_description.answer) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id already has answer!')).toString(),
                type: "error",
                chat_description: serverChatData.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        } else {
            serverChatData.chat_description.answer = {
                answerDescription: data.answerDescription,
                userId: data.userId
            };
        }

        var responseData = {
            type: 'notifyChat',
            notify_data: 'serverStoredAnswer',
            chat_description: serverChatData.chat_description,
            userId: data.userId
        };

        storeWebSocketInChatData(curWS, serverChatData);
        broadcastChat(serverChatData, responseData);

        console.log('Answer from', 'userId = ' + responseData.userId, 'chatId = ' + serverChatData.chat_description.chatId);
    },

    /**
     * device accepted answer
     * peer-to-peer connection has to be established between devices
     * remove all connection data between them except offers
     */
    onAccept: function(curWS, data) {
        var serverChatData = checkIfExist(data);
        if (!serverChatData) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id not found!')).toString(),
                type: "error",
                chat_description: data.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        }

        if (!serverChatData.chat_description.offer) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id does not have offer!')).toString(),
                type: "error",
                chat_description: serverChatData.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        }

        if (!serverChatData.chat_description.answer) {
            var strErr = JSON.stringify({
                message: (new Error('Chat with requested id does not have answer!')).toString(),
                type: "error",
                chat_description: serverChatData.chat_description
            });
            curWS.send(JSON.stringify(strErr));
            return;
        }

        var responseData = {
            type: 'notifyChat',
            notify_data: 'chatConnectionEstablished',
            chat_description: serverChatData.chat_description,
            userId: data.userId
        };

        storeWebSocketInChatData(curWS, serverChatData);
        broadcastChat(serverChatData, responseData);

        console.log('Accept from', 'userId = ' + responseData.userId, 'chatId = ' + serverChatData.chat_description.chatId);
    }
};

module.exports = Server_chat_collection;