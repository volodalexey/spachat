var id_Generator = require('./id_generator');

var Server_user_model = function(options) {
    this.userId = options.userId;
    this.webSocketsConnections = [];
};

Server_user_model.prototype = {

    __class_name: "server_user_model",

    /**
     * tries to store web socket connection
     */
    storeWebSocketConnection: function(currentWebSocketConnection) {
        var _this = this;
        if (_this.webSocketsConnections.indexOf(currentWebSocketConnection) === -1) {
            currentWebSocketConnection.tempDeviceId = id_Generator.generateId();
            _this.webSocketsConnections.push(currentWebSocketConnection);
        }
    },

    connectionsToJSON: function(connections) {
        return connections.map(function(_wsConnection) {
            return {
                deviceId: _wsConnection.deviceId,
                tempDeviceId: _wsConnection.tempDeviceId
            };
        });
    },

    connectionsToString: function(connections) {
        return connections.map(function(_wsConnection) {
            return _wsConnection.tempDeviceId;
        }).join(', ');
    },

    getAllWebSocketsConnections: function() {
        var _this = this, unused = [];
        var validConnections = _this.webSocketsConnections.filter(function (_wsConnection) {
            if (_wsConnection.readyState !== _wsConnection.CLOSED) {
                return true;
            } else {
                unused.push(_wsConnection);
                return false;
            }
        });
        _this.removeUnusedConnections(unused);
        return _this.connectionsToJSON(validConnections);
    },

    destroy: function() {
        this.webSocketsConnections = [];
    },

    broadcastMessageToActive: function(broadcastData) {
        var _this = this, unused = [], active = [];
        _this.webSocketsConnections.forEach(function(_wsConnection, index) {
            if (_wsConnection.readyState !== _wsConnection.CLOSED) {
                if (_wsConnection.ready_state) {
                    active.push(_wsConnection);
                    _wsConnection.send(broadcastData);
                }
            } else {
                unused.push(_wsConnection);
            }
        });
        _this.removeUnusedConnections(unused);
        return active;
    },

    removeUnusedConnections: function (unused) {
        var _this = this;
        while (unused.length) {
            var toRemoveConnection = unused.shift();
            var removeIndex = _this.webSocketsConnections.indexOf(toRemoveConnection);
            if (removeIndex !== -1) {
                console.log('removed old client connection',
                    'deviceId => ', _this.webSocketsConnections[removeIndex].deviceId,
                    'tempDeviceId => ', _this.webSocketsConnections[removeIndex].tempDeviceId);
                _this.webSocketsConnections.splice(removeIndex, 1);
            }
        }
    }
};

module.exports = Server_user_model;