var Server_user_model = require('./server_user_model');

var Server_users_collection = function(options) {
    this.users = [];
};

Server_users_collection.prototype = {

    __class_name: "server_users_collection",

    getUser: function(messageDescription) {
        var user;
        this.users.every(function(_user) {
            if (_user.userId === messageDescription.userId) {
                user = _user;
            }
            return !user;
        });
        return user;
    },

    storeUser: function(messageDescription) {
        var user = this.getUser(messageDescription);
        if (!user) {
            user = new Server_user_model(messageDescription);
            this.users.push(user);
        }
        return user;
    },

    applyConnectionToUser: function(wsConnection, messageDescription) {
        this.storeUser(messageDescription).storeWebSocketConnection(wsConnection);
    },

    sendError: function(currentWebSocketConnection, error, description) {
        console.log(error);
        var strErr = JSON.stringify({
            message: error.toString(),
            type: "error",
            description: description
        });
        currentWebSocketConnection.send(JSON.stringify(strErr));
    },

    onDeviceAddUser: function(currentWebSocketConnection, parsedMessageData) {
        var _this = this;

        _this.applyConnectionToUser(currentWebSocketConnection, parsedMessageData);

        var targetUser = _this.storeUser(parsedMessageData.request_body);
        if (targetUser) {
            var responseData = {
                type: 'user_add',
                userId: parsedMessageData.userId,
                tempDeviceId: currentWebSocketConnection.tempDeviceId,
                deviceId: currentWebSocketConnection.deviceId,
                user_description: parsedMessageData.user_description,
                message: parsedMessageData.message
            };
            var active = targetUser.broadcastMessageToActive(JSON.stringify(responseData));
            if (active.length) {
                var successData = {
                    type: 'user_add_sent',
                    userId: parsedMessageData.userId,
                    tempDeviceId: currentWebSocketConnection.tempDeviceId,
                    deviceId: currentWebSocketConnection.deviceId,
                    message: parsedMessageData.message,
                    connectedDevices: targetUser.connectionsToJSON(active)
                };
                currentWebSocketConnection.send(JSON.stringify(successData));
                console.log('Add user from',
                    'deviceId = ' + currentWebSocketConnection.deviceId,
                    'tempDeviceId = ' + currentWebSocketConnection.tempDeviceId,
                    'to devices = ' + targetUser.connectionsToString(active)
                )
            } else {
                _this.sendError(currentWebSocketConnection, new Error('User is not ready'));
            }
        } else {
            _this.sendError(currentWebSocketConnection, new Error('User not found'));
        }
    },

    onDeviceToggleReady: function(currentWebSocketConnection, parsedMessageData) {
        var _this = this;

        _this.applyConnectionToUser(currentWebSocketConnection, parsedMessageData);
        currentWebSocketConnection.ready_state = parsedMessageData.ready_state;

        var responseData = {
            type: 'device_toggled_ready',
            userId: parsedMessageData.userId,
            tempDeviceId: currentWebSocketConnection.tempDeviceId,
            deviceId: currentWebSocketConnection.deviceId,
            ready_state: currentWebSocketConnection.ready_state
        };

        currentWebSocketConnection.send(JSON.stringify(responseData));

        console.log('Device toggled ready state',
            'deviceId = ' + currentWebSocketConnection.deviceId,
            'tempDeviceId = ' + currentWebSocketConnection.tempDeviceId,
            'userId = ' + responseData.userId,
            'ready_state = ' + currentWebSocketConnection.ready_state);
    }
};

module.exports = Server_users_collection;